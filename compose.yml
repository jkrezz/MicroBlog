services:
  api:
    image: blog-service
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      minio:
        condition: service_started
      users_db:
        condition: service_healthy
      posts_db:
        condition: service_healthy
    networks:
      - app-network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
  
  users_db:
    image: postgres
    container_name: users_db
    environment:
      POSTGRES_DB: usersdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 2025
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - users-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  posts_db:
    image: postgres
    container_name: posts_db
    environment:
      POSTGRES_DB: postsdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 2025
    ports:
      - "5433:5432"
    networks:
      - app-network
    volumes:
      - posts-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
networks:
  app-network:
    driver: bridge

volumes:
  minio_storage: {}
  users-db-data: { }
  posts-db-data: { }